version: '3'

name: ha-analytics

networks:
  data-dev:
  tunneled-dev:

services:
  database:
    image: postgres:16.2
    
    environment:
      POSTGRES_PASSWORD: temp
    volumes:
      - ../database/data:/var/lib/postgresql/data
      - ../database/db.sql:/docker-entrypoint-initdb.d/db.sql
    networks:
      - data-dev
    restart: unless-stopped
    ports:
      - 9009:5432

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - 9008:8080
    networks:
      - data-dev
  mqtt-broker:
    image: eclipse-mosquitto:2.0.18
    ports:
      - 1883:1883
      - 8883:8883
    volumes:
      - ../mqtt-broker/mosquitto/log:/mosquitto/log
      - ../mqtt-broker/mosquitto/data:/mosquitto/data
      - ../mqtt-broker/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ../mqtt-broker/mosquitto/certs:/mosquitto/certs
    networks:
      - tunneled-dev
    restart: unless-stopped

  data-saver:
    build:
      context: ../data-saver/
      dockerfile: ../data-saver/Dockerfile.dev
    volumes:
      - ../certs/ca.crt:/certs/ca.crt
    environment:
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - API_URL=${API_URL}
      - MQTT_BROKER_URL=${MQTT_BROKER_URL}
      - MQTT_BROKER_TLS_URL=${MQTT_BROKER_TLS_URL}
    depends_on:
      - database
      - mqtt-broker
    restart: unless-stopped
    networks:
      - tunneled-dev

  ha-api:
    build:
      context: ../ha-api/
      dockerfile: ../ha-api/Dockerfile
    environment:
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - tunneled-dev
      - data-dev

  auth-api:
    build:
      context: ../auth-api/
      dockerfile: ../auth-api/Dockerfile
    environment:
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - tunneled-dev
      - data-dev

  frontend:
    build:
      context: ../frontend/
      dockerfile: ../frontend/Dockerfile.dev
    restart: unless-stopped
    networks:
      - tunneled-dev

  nginx-proxy:
    image: nginx:alpine3.18
    volumes:
      - type: bind
        source: ../nginx/nginx.dev.conf 
        target: /etc/nginx/nginx.conf
    restart: unless-stopped
    networks:
     - tunneled-dev

  proxy-tunnel:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    restart: unless-stopped
    networks:
     - tunneled-dev


